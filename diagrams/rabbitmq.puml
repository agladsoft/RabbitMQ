@startuml
package "receive_py" {

    class Receive {
        -logger: logging.getLogger
        -log_file: str
        -rabbit_mq: RabbitMQ
        -client: Client
        -count_message: int
        -is_greater_time: bool
        -queue_name: str
        -table_name: str
        -message_errors: list
        +connect_to_db()
        +load_stats() dict
        +save_stats(stats: dict)
        +update_stats()
        +_check_and_update_log(current_time: time, required_time: time, time_sleep: int) bool
        +_send_with_retries(message: str) Optional[requests.Response]
        +send_stats() Optional[requests.Response]
        +callback(ch, method, properties, body)
        +process_data(all_data: dict, data, data_core, eng_table_name: str, key_deals: str)
        +_parse_message(msg) Tuple[dict, str, str]
        +handle_incoming_json(msg) Tuple[dict, list, Any, str]
        +write_to_json(msg: dict, eng_table_name: str, dir_name: str) str
        +process_queue(queue_name: str)
        +main()
    }



    class JsonEncoder {
        default(self, obj)
    }

}

Receive --> JsonEncoder : uses
@enduml


@startuml
title "Полная последовательность обработки данных"

participant "1С:Предприятие" as onec
participant "RabbitMQ Server\n10.23.4.199" as rabbitmq
participant "Receive" as receive
participant "DataCoreClient" as datacore
participant "Test DB\n10.23.4.203" as testdb
participant "Prod DB\n10.23.4.196" as proddb

note over onec: Этап 1: Генерация данных
activate onec
onec->>rabbitmq: Отправка данных в очереди
note right: Данные отправляются в\nразличные очереди\n(Queue1, Queue2, ...)
activate rabbitmq

note over receive: Этап 2: Получение сообщений
activate receive
receive->>rabbitmq: Подключение к очереди
rabbitmq-->>receive: Получение сообщения
note right: process_queue(queue_name)

note over receive: Этап 3: Обработка сообщения
receive->>receive: callback(ch, method, properties, body)
activate receive
receive->>receive: handle_incoming_json(msg)
receive->>receive: _parse_message(msg)
note right: Парсинг JSON\nПолучение all_data,\nrus_table_name, key_deals
receive-->>receive: all_data, rus_table_name, key_deals
deactivate receive

note over receive, datacore: Этап 4: Передача данных для обработки
receive->>datacore: process_data(all_data, data, data_core, eng_table_name, key_deals)
activate datacore

note over datacore: Этап 5: Обработка и трансформация
datacore->>datacore: change_columns(data)
datacore->>datacore: convert_format_date()
datacore->>datacore: add_new_columns()
datacore->>datacore: convert_to_lowercase()
datacore->>datacore: check_difference_columns()

note over datacore: Этап 6: Работа с базами данных
datacore->>datacore: get_table_columns()
datacore->>datacore: handle_rows(all_data, data, key_deals)

alt Тестовая среда
    datacore->>testdb: insert_message() / update_status()
    activate testdb
    testdb-->>datacore: Результат операции
    deactivate testdb
else Продакшн среда  
    datacore->>proddb: insert_message() / update_status()
    activate proddb
    proddb-->>datacore: Результат операции
    deactivate proddb
end

datacore-->>receive: Завершение обработки
deactivate datacore

note over receive: Этап 7: Подтверждение обработки
receive->>rabbitmq: basic_ack(delivery_tag)
note right: Подтверждение успешной\nобработки сообщения
rabbitmq-->>receive: ACK подтвержден
deactivate receive
deactivate rabbitmq
deactivate onec

note over onec, proddb: Процесс завершен успешно
@enduml


@startuml
allow_mixing
package "tables_py" {
    left to right direction
    class DataCoreClient {
        -receive: Receive
        -removed_columns_db: list
        -_original_date_string: str
        +database: str
        +deal: str
        +table: str
        +original_date_string: str
        +change_columns(data: dict, *args, **kwargs)
        +convert_format_date(date_: str, data: dict, column, is_datetime: bool) Union[datetime, str]
        +add_new_columns(data: dict, file_name: str, original_date_string: str)
        +convert_to_lowercase(data: dict) dict
        +check_difference_columns(all_data: dict, eng_table_name: str, list_columns_db: list, list_columns_rabbit: list, key_deals: str) list
        +get_table_columns() list
        +insert_message(all_data: dict, key_deals: str, is_success_inserted: bool)
        +handle_rows(all_data, data: list, key_deals: str)
        +update_status(key_deals: str)
        +delete_old_deals(cond: str)
    }
    class DataCoreFreight {
        +original_date_string: str
        +change_columns(*args, **kwargs)
    }
    class NaturalIndicatorsContractsSegments {
        +original_date_string: str
        +change_columns(*args, **kwargs)
    }
    class CounterParties
    class OrdersReport {
        +original_date_string: str
        +change_columns(*args, **kwargs)
    }
    class AutoPickupGeneralReport {
        +original_date_string: str
        +change_columns(*args, **kwargs)
    }
    class TransportUnits
    class Consignments {
        +original_date_string: str
        +change_columns(*args, **kwargs)
    }
    class SalesPlan {
        +change_columns(*args, **kwargs)
    }
    class NaturalIndicatorsTransactionFactDate {
        +original_date_string: str
        +change_columns(*args, **kwargs)
    }
    class DevelopmentCounterpartyDepartment {
        +change_columns(*args, **kwargs)
    }
    class ExportBookings {
        +original_date_string: str
        +change_columns(*args, **kwargs)
    }
    class ImportBookings {
        +original_date_string: str
        +change_columns(*args, **kwargs)
    }
    class CompletedRepackagesReport {
        +original_date_string: str
        +change_columns(*args, **kwargs)
    }
    class AutoVisits {
        +original_date_string: str
        +change_columns(*args, **kwargs)
    }
    class AccountingDocumentsRequests {
        +original_date_string: str
        +change_columns(*args, **kwargs)
    }
    class DailySummary {
        +original_date_string: str
        +change_columns(*args, **kwargs)
    }
    class RZHDOperationsReport {
        +original_date_string: str
        +change_columns(*args, **kwargs)
    }
    class OrdersMarginalityReport {
        +original_date_string: str
        +change_columns(*args, **kwargs)
    }
    class NaturalIndicatorsRailwayReceptionDispatch {
        +original_date_string: str
        +change_columns(*args, **kwargs)
    }
    class Accounts {
        +original_date_string: str
        +change_columns(*args, **kwargs)
    }
    class FreightRates {
        +original_date_string: str
        +change_columns(*args, **kwargs)
    }
    class MarginalityOrdersActDate {
        +original_date_string: str
        +change_columns(*args, **kwargs)
    }
    class RusconProducts {
        +original_date_string: str
        +change_columns(*args, **kwargs)
    }
    class ReferenceLocations {
        +change_columns(*args, **kwargs)
    }
    class TerminalsCapacity {
        +original_date_string: str
        +change_columns(*args, **kwargs)
    }
    class ManagerEvaluation {
        +database: str
        +original_date_string: str
        +change_columns(*args, **kwargs)
    }
    class ReferenceCounterparties {
        +database: str
        +change_columns(*args, **kwargs)
    }
    DataCoreFreight --> DataCoreClient
    NaturalIndicatorsContractsSegments --> DataCoreClient
    CounterParties --> DataCoreClient
    OrdersReport --> DataCoreClient
    AutoPickupGeneralReport --> DataCoreClient
    TransportUnits --> DataCoreClient
    Consignments --> DataCoreClient
    SalesPlan --> DataCoreClient
    NaturalIndicatorsTransactionFactDate --> DataCoreClient
    DevelopmentCounterpartyDepartment --> DataCoreClient
    ExportBookings --> DataCoreClient
    ImportBookings --> DataCoreClient
    CompletedRepackagesReport --> DataCoreClient
    AutoVisits --> DataCoreClient
    AccountingDocumentsRequests --> DataCoreClient
    DailySummary --> DataCoreClient
    RZHDOperationsReport --> DataCoreClient
    OrdersMarginalityReport --> DataCoreClient
    NaturalIndicatorsRailwayReceptionDispatch --> DataCoreClient
    Accounts --> DataCoreClient
    FreightRates --> DataCoreClient
    MarginalityOrdersActDate --> DataCoreClient
    RusconProducts --> DataCoreClient
    ReferenceLocations --> DataCoreClient
    TerminalsCapacity --> DataCoreClient
    ManagerEvaluation --> DataCoreClient
    ReferenceCounterparties --> DataCoreClient
}

package "receive_py" {

    class Receive {
        -logger: logging.getLogger
        -log_file: str
        -rabbit_mq: RabbitMQ
        -client: Client
        -count_message: int
        -is_greater_time: bool
        -queue_name: str
        -table_name: str
        -message_errors: list
        +connect_to_db()
        +load_stats() dict
        +save_stats(stats: dict)
        +update_stats()
        +_check_and_update_log(current_time: time, required_time: time, time_sleep: int) bool
        +_send_with_retries(message: str) Optional[requests.Response]
        +send_stats() Optional[requests.Response]
        +callback(ch, method, properties, body)
        +process_data(all_data: dict, data, data_core, eng_table_name: str, key_deals: str)
        +_parse_message(msg) Tuple[dict, str, str]
        +handle_incoming_json(msg) Tuple[dict, list, Any, str]
        +write_to_json(msg: dict, eng_table_name: str, dir_name: str) str
        +process_queue(queue_name: str)
        +main()
    }

}

DataCoreClient --> Receive

database "Test Database 10.23.4.203" as TestDB
database "Production Database 10.23.4.196" as ProdDB
DataCoreClient --> TestDB : "отправка обработанных данных"
DataCoreClient --> ProdDB : "отправка обработанных данных"

cloud "RabbitMQ Server 10.23.4.199" as RabbitMQ {
    queue Queue1
    queue Queue2
    queue Queue3
    queue Queue4
    queue Queue5
    queue Queue6
    queue Queue7
    queue Queue8
    queue Queue9
    queue Queue10
    queue OtherQueues
}

Receive --> Queue1 : "подключение к очереди"
Receive --> Queue2 : "подключение к очереди"
Receive --> Queue3 : "подключение к очереди"
Receive --> Queue4 : "подключение к очереди"
Receive --> Queue5 : "подключение к очереди"
Receive --> Queue6 : "подключение к очереди"
Receive --> Queue7 : "подключение к очереди"
Receive --> Queue8 : "подключение к очереди"
Receive --> Queue9 : "подключение к очереди"
Receive --> Queue10 : "подключение к очереди"
Receive --> OtherQueues : "подключение к очереди"

actor "1С:Предприятие" as 1С
1С --> RabbitMQ : "отправка данных"
@enduml